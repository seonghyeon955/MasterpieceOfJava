다수의 클래스를 정의하고 활용하는 연습을 해보자. 
더하기,빼기,곱하기,나누기를 수행하는 각 클래스 Add,Sub,Mul,Div를 만들어라. 이들은 모두 다음 필드와 메소드를 가진다.

-int 타입의 a,b필드 :연산하고자 하는 피연산자
-void setValue(int a, int b) : 피연산자를 객체 내에 설정한다.
-int calculate() : 해당 클래스의 목적에 맞는 연산을 실행하고 그 결과를 리턴한다.

[Add],[Sub],[Mul],[Div] 이하 다 같음
int a 
int b
setValue()
calculate()

main() 메소드에서는 다음 실행 사례의 그림과 같이 키보드로부터 두 정수와 계산하고자 하는 연산자를 입력받은 후 
Add,Sub,Mul,Div중 이 연산을 실행할 수 있는 객체를 생성하고 setValue()와 calculate()를 호출하여 그 결과값을 화면에 출력한다.

출력 예)

두 정수와 연산자를 입력하시오 >> 3 4 +
7

풀이)

main이 돌아가는 메인클래스 하나/
더하기/빼기/곱하기/나누기 기능을 실행하는 클래스 각 하나씩/
위 기능을 공통으로 실행하는 틀로 쓰일 인터페이스 하나

public class q5{
  public static void main(String[] args)throws IOException{
    System.out.print("두 정수와 연산자를 입력해주세요 >>");
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    StringTokenizer st = new StringTokenizer(br.readLine(), " ");
    int a = Integer.parseInt(st.nextToken());
    int b = Integer.parseInt(st.nextToken());
    String operator = st.nextToken(); //연산자 
    Calculate cClass = null; //빈클래스 생성 
   
   if(operator.equals("+")){
    cClass = new Add(); //Add타입의 빈 클래스 생성 
   }else if(operator.equals("-")){
    cClass = new Sub();
   }else if(operator.equals("*")){
    cClass = new Mul();
   }else if(operator.equals("/")){
    cClass = new Div();
   }
   cClass.setValue(a,b);
   System.out.println( cClass.startCalculate(a,b) );
  }
}

public interface Calculate{// 연산을 시행하는 클래스는 인터페이스를 오버라이딩 하여 메소드의 내용만을 바꿔 실행한다.
  void setValue(int a, int b);
  int startCalculate(int a, int b);
}

class Add implements Calculate{
  private int a,b;
  //Override
  public void setValue(int a, int b){
    this.a = a;
    this.b = b;
  };
  
  public int startCalculate(int a, int b){
    int result=0;
    result = a+b;
    return result;
  }
}// Add end

class Sub implements Calculate{
	 private int a,b;
	@Override
	public void setValue(int a, int b) {
		this.a = a;
		this.b = b;
		
	}

	@Override
	public int startCalculate(int a, int b) {
		int result = 0;
		if(a>b) result = a-b;
		else if(a<b) result= b-a;
		
		return result;
	}
	 
 }
 
 class Mul implements Calculate{
	 private int a,b;
	@Override
	public void setValue(int a, int b) {
		this.a = a;
		this.b = b;
		
	}

	@Override
	public int startCalculate(int a, int b) {
		int result=0;
		result = a * b;
		return result;
	}
	 
	 
 }
 
 class Div implements Calculate{
	 private int a,b;
	@Override
	public void setValue(int a, int b) {
		this.a = a;
		this.b = b;
		
	}

	@Override
	public int startCalculate(int a, int b) {
		int result = 0;
		if(a != 0 && b != 0) {
			if(a>b) result = a/b;
			else if(b>a) result= b/a;
		}
		return result;
	}
	 
 }
